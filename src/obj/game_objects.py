"""Game objects are """

from typing import Any, Dict, List, Optional, Tuple, Type
from abc import ABC
from pydantic import BaseModel, Field


class Game:
    """A class for housing game logic and managing the game's internal state.

    Attributes:
        id (int): Unique ID for object
        current_state
        move_history
        players_in_game

    Functions:
        get_game_state()
            * return a serializable, file writable, importable save state.
        load_game_state(state_file)
            * restores internal game state from file.
        submit_move(move)

    """

    ...


class User(BaseModel):
    """An object with basic user information.

    Attributes:
        id (int): Unique ID for object
        name (str): The user's display name

    """

    id: int
    username: str
    password: str

    ...


# // TODO: Implement below list of commands as subclasses.

# Command List:
# * prompt_move
# * display_result
# * wait_for_result
# * prompt_new_game


class Move(BaseModel):
    """An object containing information about the move and the user

    Attributes:
        parent_command_id (int): UID of the `Command` that initiated a `GetMoveCommand`
        move (str): either "rock", "paper", or "scissors"
        user (User): the `User` submitting the move

    """

    parent_uid: int
    move: str
    user: User


class States(BaseModel):
    """A simple dataclass for State definitions"""

    welcome: str = "Welcome"


class GameState(BaseModel):
    """A complete game state class, indicating the involved users, current game data,
    current game status (pending moves, pending game start, etc), and any other
    information needed to process or rebuild the game's current state, across modules.
    """

    game_id: Optional[int]
    state: States = States(state="Welcome")
    players: Optional[Tuple[User]]
    ready: Optional[Tuple[User]]
    current_moves: Optional[Dict[str, Move]]
    moves_history: Optional[Tuple[Tuple[User, Move]]]
    winner: Optional[User]

    class Config:
        arbitrary_types_allowed = True

    """
    Okay, what are my game states?

    * Welcome
    * Requesting Lobby
    * Select Opponent
    * Requesting Opponent
        * Matched, begin Game
        * Request Rejected, return to Lobby
    * Game
        * Requesting 'Ready' status from players
        * Waiting for opponent
        * Request 'Move' from players
        * Waiting for opponent
        * Game Over
            * New Game?
            * Return to Lobby
    """


class Command(BaseModel):
    """An instruction packet, generated by Server, consumed by Client.

    Contains instructions that trigger state changes in the UI.
    Should always be subclassed, with more specific information made available
    for each type of Command (display_game_over, await_response, )

    Attributes:
        id (int): Unique ID for object


    Functions:
        execute()
            * contains the functions necessary to trigger change in the client

    """

    uid: int
    command: str
    state: GameState
